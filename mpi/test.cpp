#include "mpi.h"

#include "stdio.h"

#define MULT_MSG 1

#define ADD_MSG 2


int myid, namelen;

char processorname[MPI_MAX_PROCESSOR_NAME];


void adder(){

    int data[4] = {0, 0, 0, 0}, sum = 0, i;
    
    MPI_Status status;
    
    MPI_Recv(data, 4, MPI_INT, 0, ADD_MSG, MPI_COMM_WORLD, &status);
    
    for (i = 0; i < 4; i++){
        sum += data[i];
    }
    
    printf("Result generated by process %d on %s is %d", myid, processorname, sum);

}


void multiplier(){
    int data[4] = {0, 0, 0, 0}, product = 1, i;

    MPI_Status status;

    MPI_Recv(data, 4, MPI_INT, 0, MULT_MSG, 
        
    MPI_COMM_WORLD, &status);

    for (i = 0; i < 4; i++)
    {

        product *= data[i];
    }

    printf("Result generated by process %d on %s is %d", myid, processorname, product);

}


void master(){

    int data[4] = {1, 3, 5, 7};
    
    MPI_Send(data, 4, MPI_INT, 1, ADD_MSG, MPI_COMM_WORLD);
    
    MPI_Send(data, 4, MPI_INT, 2, MULT_MSG, MPI_COMM_WORLD);
    
    printf("Data sent from process %d on %s", myid, processorname);

}


int  main(int argc, char *argv[]){

    MPI_Init(&argc, &argv);
    
    MPI_Comm_rank(MPI_COMM_WORLD, &myid);
    
    MPI_Get_processor_name(processorname, &namelen);
    
    switch (myid){    
        case 0: master();
                break;
    
        case 1: adder();
                break;
    
        case 2: multiplier();
                break;
    }

    MPI_Finalize();
    return 0;
}
